<!doctype html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="description" content="Panew:潘无处不在的博客">
  <meta name="keywords" content="nodejs,express,npm,node,js,javascript,mongo,css,angular,css3,html,html5">
  <title>关于我</title>
  <style type="text/css">
    .main {
      width: 800px;
      margin: 0 auto;
      font: 16px/26px 'Microsoft YaHei', Tahoma;
      letter-spacing: .3px;
    }

    .title {
      text-align: center;
    }

  </style>
</head>
<body>

<div class="main">
  <h1 class="title">关于我</h1>
  <ul>
    <li>
      <p><strong>性别</strong>：男</p>
    </li>
    <li>
      <p><strong>出生</strong>：1990年06月20日 庚午年【马年】五月廿八</p>
    </li>
    <li>
      <p><strong>兴趣</strong>：编程 游戏 运动 妞 （排名不分先后）</p>
    </li>
    <li>
      <p><strong>技能</strong>：</p>
      <ul>
        <li>
          <p><strong>windows、linux</strong>：安装及使用</p>
        </li>
        <li>
          <p><strong>HTML</strong>：How to make love，高中开始对这个有所了解，可直到上大学才开始系统学习，到现在写了多少行已经擢发难数了，写HTML要有良好的结构，用语义化的标签，用尽量少的标签展现更多的内容，正确的声明html文件的第一行（&lt;!DOCTYPE&gt;）对html的解析至关重要，因为它决定了文档的类型，良好定义&lt;head&gt;里面的标签也对网页各个方面的优化有重要作用，在此就不一一列举。</p>
        </li>
        <li>
          <p><strong>CSS</strong>：也是从大学开始系统学习，对于这个更多的就是记属性，记用法，如何引用CSS文件，选择器都有哪几种，优先级如何等等，随着网站形式的复杂，编写CSS也越来越复杂，遂出现了很多预编译工具，大大减轻了CSS编写的复杂程度，常见的有SASS、LESS、Stylus，SASS是跟Ruby环境密切相关，LESS由于Bootstrap越来越被人熟知，Stylus是Node社区的TJ大神所创作的，介于我的技能背景，我之前用的LESS，现在用Stylus。</p>
        </li>
        <li>
          <p><strong>Node</strong>：早有耳闻，最初是在大学期间翻阅科技网站知晓，首次接触使用这个是在一家游戏公司，架构师用的网易的Pomelo（基于NODE）架构，我的Node之旅也从那时开始，回调的痛苦经历让我至今难忘，完全不同于静态语言的代码结构让我花了好久才掌握，现在这个博客系统就是基于express打造的，运行环境为linux+nginx+node+mongodb+redis，纯手工编写，还有很多不足，一直在优化。</p>
        </li>
        <li>
          <p><strong>ASP.NET</strong>:大学学过这门专业，带我进了后端这片苦海，学海无涯，一开始就是拖拖控件，调调大小，随便写点代码一个网站就好了，期间帮老师做过几个网站，小到企业站，大到政府内部人事管理系统，有一个项目因为静态变量的问题一直研究了两天才解决，现在回首那些网站真是有点搓，不过扎扎实实地学会了很多后端架构思想，再往后大学毕业前学会了ASP.NET MVC让我发现原来代码还可以这样组织，兴趣暴增，一直沿用到NODE中。</p>
        </li>
        <li>
          <p><strong>MSSQL</strong>：说起这个，我得说说存储过程，之前看网友说存储过程是预先编译好的，在做CURD的时候能大大提高效率，遂写了N多存储过程，其它的诸如join查询，子查询，分组，索引等也都是用的不少。</p>
        </li>
        <li>
          <p><strong>Javascript</strong>:终于说到它了，那是在一个夜黑风高的夜晚，书上说Javascript能做出富有表现力的网站，遂开始了这条不归路，开始的时候只是为了实现页面上的某种效果，所以用的多的还是Jquery，后来慢慢随着时间的推移代码越发臃肿难以维护，开始了解原生的javascript，诸如回调函数，原型链，闭包，作用域，变量提升等等，通过一系列复杂的技巧，编写出模块化、可维护、高复用的javascript代码，是正在做的，也是需要不停探索的。</p>
        </li>
        <li>
          <p><strong>Jquery</strong>：用的太多了，简单一句话，选取页面上的DOM元素，赋予这个元素某种效果，就是Jquery主要的使命，Jquery封装的Ajax模块也是一大亮点，方便的调取数据，这酸爽。</p>
        </li>

        <li>
          <p><strong>mongoose</strong>：一个ODM用来连接mongodb，mongodb的数据结构搭配javascript完全无障碍啊，一个是BSON(Binary JSON)格式，一个就是JSON，mongoose的CURD已是相当熟悉，深一点的如ref，index，aggregate等也都有所使用，再偏一点的官方文档去找。</p>
        </li>
        <li>
          <p><strong>angular</strong>：这个网站的后台系统就是基于angular做的，不得不说还是很不错的，虽然也有很多坑，不过慢慢填吧，做开发就是挖坑埋坑，什么route，controller，views
            ，directive，service，order等也都用上了感觉上就像是在写javascript模块。</p>
        </li>
      </ul>
    </li>
    <li>
      <p><strong>生涯模式</strong>：小学开始玩电脑，一开始就是打游戏，一直打到现在，打的少了很多，但根本停不下来，那时候玩《传奇》，为了变NB，不停地练级，刷装备，但某天偶然发现有些人通过某些工具能快速的得到这些，上了初中知道那玩意叫外挂，外挂是由代码编写出来的，编程之路由此开始，一开始接触的是VB，感觉萌萌哒，弄出了一个窗口，里面显示几行字，就没有然后了。不过那时一直有看电脑报什么的科技报刊杂志，积累了相当多的电脑知识，上了高中，对编程的兴趣只增不减，某天母亲从省城带回一本书，ASP从入门到精通，试着看了看，照着例子有模有样的搞出来个网站，但始终没有精通。</p>

      <p>后来上了大学，开始系统的学习编程知识，期间为老师做过几个网站，大部分都是那种企业站，偏展示，做个通用的后台管理系统（CMS），基本上能一劳永逸。又加入学校的实验室，做了一个人事管理系统，大二暑假在一个建站公司兼职，也是企业站，就在做这些网站的时候，积累了相当多的经验，学了不少学校教不到的技能，从前端到后端都是一个人做，拿到设计稿，我跟同事说需要哪几块图片，他帮我切好后给我，大大小小做了有一二十个企业站，到了大三下学期，了解到了redis,mongo,node这些在当时比较前沿的东西，惊奇的发现后端领域也有javascript的一席之地了，再加上html5在移动端的表现也很突出，想象着未来可能前后端以及移动端都有javascript的身影，激动的无以言表，喜大普奔，就依然决然的投入到了深耕javascript的行列中，毕业后到上海，在一家游戏公司做了一个基于Pomelo框架的游戏，干了5个月公司不景气就...(你懂的)，之后去了一家做基于微信业务的公司，纯前端岗位，JS、HTML、CSS开始玩的飞转，一面强化基础用法，一面探索奇技淫巧，对这三样技术有了质的飞跃。一年之后，去了家做在线婚宴预定的公司，由于之前一直没有放下NODE，并且NODE也是用javascript，所以到了这家公司就是全职node岗，作为前后端的一个中介者，对前端提供数据支撑，分为两方面，一方面是有模板引擎，就渲染之，一方面是提供API接口，供前端调用。对后端主要是调取各个后端接口提供的数据，再组装、整形。</p>

     <p>题外话：2015年春节期间，花了点时间做了这个博客系统，参考了Hexo，cnode等的源码，基于linux+nginx+node+mongodb+redis构建而成，管理系统用的是angular，来练练手，一开始只是用的node，但是发现静态文件都用node来处理的话会增加很多不必要的请求负载，遂用了nginx，并把一部分静态文件请求直接通过nginx处理。后来，又发现网站打开速度还是略慢，就想着加上一个缓存系统，就用了redis，果然速度提升不少。当然，出于安全性的考虑，数据层面的端口全都改过，并且加密。</p>

      <p>That's all</p>

    </li>
  </ul>
</div>
</body>
</html>